{"version":3,"sources":["components/InvForm.js","components/InvChart.js","components/App/index.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","width","InvForm","onSubmit","classes","onSubmitCb","useCallback","values","initialInvestment","monthlyContribution","interestRate","tax","compoundFreq","timeLength","resultsList","conpoundFreqInt","parseInt","timeLengthInt","initialInvestmentFl","parseFloat","iterations","Math","ceil","periodRate","periodTaxRate","periodContribution","sum","investmentsTotal","incomeNetTotal","taxTotal","i","incomeGross","incomeNet","push","result","periods","round","initialValues","props","handleSubmit","className","Box","TextField","label","name","onChange","handleChange","value","Button","variant","color","type","defaultProps","InvChart","data","tooltipFormatter","tooltipLabelFormatter","mappedData","map","p","val","style","marginTop","height","top","right","left","bottom","dataKey","labelFormatter","formatter","fill","Typography","marginBottom","App","useState","setData","Container","fixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1b75d013.chunk.js","sourcesContent":["import React, {useCallback} from 'react'\nimport PropTypes from 'prop-types'\nimport TextField from '@material-ui/core/TextField'\nimport {Formik} from 'formik'\nimport Box from '@material-ui/core/Box'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nfunction InvForm({onSubmit}) {\n\n    const initialValues = {\n        initialInvestment: 0,\n        monthlyContribution: 0,\n        interestRate: 6.5,\n        tax: 13,\n        compoundFreq: 12,\n        timeLength: 60,\n    }\n\n    const classes = useStyles();\n\n    const onSubmitCb = useCallback((values) => {\n\n        const {\n            initialInvestment,\n            monthlyContribution,\n            interestRate,\n            tax,\n            compoundFreq,\n            timeLength,\n        } = values\n\n        const resultsList = []\n        const conpoundFreqInt = parseInt(compoundFreq)\n        const timeLengthInt = parseInt(timeLength)\n        const initialInvestmentFl = parseFloat(initialInvestment)\n        const iterations = Math.ceil(conpoundFreqInt * (timeLengthInt / 12))\n        const periodRate = (parseFloat(interestRate) / 100) / conpoundFreqInt\n        const periodTaxRate = parseFloat(tax) / 100\n        const periodContribution = parseFloat(monthlyContribution) / (conpoundFreqInt / 12)\n\n        let sum = initialInvestmentFl\n        let investmentsTotal = initialInvestmentFl\n        let incomeNetTotal = 0\n        let taxTotal = 0\n\n        for (let i=0; i<iterations; i++) {\n            const incomeGross = sum * periodRate\n            const tax = incomeGross*periodTaxRate\n            const incomeNet = incomeGross - tax\n            incomeNetTotal+=incomeNet\n\n            sum+=incomeNet\n            taxTotal+=tax\n\n            sum+=periodContribution\n            investmentsTotal+=periodContribution\n\n            resultsList.push(sum)\n        }\n\n        const result = {\n            periods: resultsList,\n            compoundFreq: conpoundFreqInt,\n            timeLength: timeLengthInt,\n            investmentsTotal: Math.round(investmentsTotal * 100) / 100,\n            incomeNetTotal: Math.round(incomeNetTotal * 100) / 100,\n            sum: Math.round(sum * 100) / 100,\n            taxTotal: Math.round(taxTotal * 100) / 100,\n        }\n\n        onSubmit && onSubmit(result)\n    }, [onSubmit])\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={onSubmitCb}\n        >\n            {props => (\n                <form onSubmit={props.handleSubmit} className={classes.root} >\n                    <Box>\n                        <TextField label=\"Initial investment\"\n                                   name=\"initialInvestment\"\n                                   onChange={props.handleChange}\n                                   value={props.values.initialInvestment} />\n                        <TextField label=\"Monthly contribution\"\n                                   name=\"monthlyContribution\"\n                                   onChange={props.handleChange}\n                                   value={props.values.monthlyContribution} />\n                    </Box>\n                    <Box>\n                        <TextField label=\"Interest rate (%)\"\n                                   name=\"interestRate\"\n                                   onChange={props.handleChange}\n                                   value={props.values.interestRate} />\n                        <TextField label=\"Tax (%)\"\n                                   name=\"tax\"\n                                   onChange={props.handleChange}\n                                   value={props.values.tax} />\n                    </Box>\n\n                    <Box>\n                        <TextField label=\"Compound frequency\"\n                                   name=\"compoundFreq\"\n                                   onChange={props.handleChange}\n                                   value={props.values.compoundFreq} />\n                        <TextField label=\"Time (months)\"\n                                   name=\"timeLength\"\n                                   onChange={props.handleChange}\n                                   value={props.values.timeLength} />\n                    </Box>\n\n                    <Button variant=\"outlined\" color=\"primary\" type=\"submit\">\n                        Calculate\n                    </Button>\n                </form>\n            )}\n        </Formik>\n\n    )\n}\n\nInvForm.propTypes = {}\nInvForm.defaultProps = {}\n\nexport default InvForm\n","import React, {useCallback} from 'react'\nimport PropTypes from 'prop-types'\nimport {BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts'\nimport Paper from '@material-ui/core/Paper'\nimport {Box, Typography} from '@material-ui/core'\n\nfunction InvChart({data}) {\n    const tooltipFormatter = useCallback((value, name, props) => ([`${Math.round(value*100)/100}`, `Sum: `] ), [])\n    const tooltipLabelFormatter = useCallback((value) => (`Period ${value}`), [])\n\n    if (!data)\n        return null\n\n    const mappedData = data.periods.map((p, i) => ({\n        name: i + 1,\n        val: p,\n    }))\n\n    const {\n        investmentsTotal,\n        incomeNetTotal,\n        sum,\n        taxTotal,\n    } = data\n\n    return (\n        <Box style={{marginTop: '30px'}}>\n            <BarChart width={1000}\n                      height={400}\n                      margin={{\n                          top: 20, right: 0, left: 0, bottom: 5,\n                      }}\n                      data={mappedData} >\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip labelFormatter={tooltipLabelFormatter} formatter={tooltipFormatter} />\n                <Bar dataKey=\"val\" fill=\"#8884d8\" />\n            </BarChart>\n            <Typography variant=\"h5\" style={{marginBottom: '30px'}}>\n                Investments: {investmentsTotal} &emsp;&emsp; Net income: {incomeNetTotal} &emsp;&emsp; Tax: {(-1)*taxTotal} &emsp;&emsp; Total: {sum}\n            </Typography>\n        </Box>\n\n    )\n}\n\nInvChart.propTypes = {}\nInvChart.defaultProps = {}\n\nexport default InvChart\n","import React, {useCallback, useState} from 'react';\nimport {Container, Typography} from '@material-ui/core'\nimport InvForm from '../InvForm'\nimport InvChart from '../InvChart'\n\nfunction App() {\n    const [data, setData] = useState(null)\n\n    const onSubmitCb = useCallback(data => {\n        setData(data)\n    }, [])\n\n    return (\n        <Container fixed={true}>\n            <Typography variant=\"h4\" style={{marginBottom: '30px'}}>\n                Compound interest calculator\n            </Typography>\n            <InvForm onSubmit={onSubmitCb}/>\n            <InvChart data={data} />\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}